/*
 * Copyright 2017 enocean4j development teams
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package uk.co._4ng.enocean.eep.eep26.profiles.D2.D201;

/**
 * A class providing an high-level representation of the results of an actuator
 * status response received via the EnOcean serial API.
 * <p>
 * The Actuator Status Response message is generated by an actuator if one of
 * the following events occur:
 * <ul>
 * <li>The status of one channel has been changed locally</li>
 * <li>An Actuator Status Query message has been received</li>
 * </ul>
 * <p>
 * In the latter case this message will be sent by the actuator within a maximum
 * of 50ms from the time of reception of the query message.
 *
 * @author <a href="mailto:dario.bonino@gmail.com">Dario Bonino</a>
 */
class D201ActuatorStatusResponse {
    // the power failure enabled flag
    private final boolean powerFailureEnabled;

    // the power failure detection flag
    private final boolean powerFailureDetected;

    // the id of the command, should be 4
    private final int commandId;

    // the flag signalling overcurrent switch-off execution
    private final boolean overCurrentSwitchOffExecuted;

    // the actuator error state, if any
    private final D201ErrorLevel errorLevel;

    // the channel to which the response is referred
    private final int channelId;

    // the input / output flag
    private final boolean output;

    // the local control enabled flag
    private final boolean localControlEnabled;

    // the current output value
    private int outputValue;

    // the flag signalling if the output is valid
    private boolean validOutputValue;

    /**
     * Class constructor, builds an ActuatorStatusResponse instance given the
     * low level byte representations of all values carried by the serial-level
     * response message.
     *
     * @param powerFailure          Power failure indicator
     * @param powerFailureDetection Power failure detection
     * @param commandId             Command ID
     * @param errorLevel            Error level
     * @param channelId             Chnnel ID
     * @param localControl          Local control
     * @param outputValue           Output value
     */
    D201ActuatorStatusResponse(byte powerFailure, byte powerFailureDetection, byte commandId, byte overCurrentSwitchOff, byte errorLevel, byte channelId, byte localControl, byte outputValue) {
        // store the power failure attribute
        powerFailureEnabled = powerFailure != 0;

        // store the power failure detection state
        powerFailureDetected = powerFailureDetection != 0;

        // store the command id
        this.commandId = commandId;

        // store the overcurrent switch-off flag
        overCurrentSwitchOffExecuted = overCurrentSwitchOff != 0;

        // store the error level
        this.errorLevel = D201ErrorLevel.valueOf(errorLevel);

        // store the channel id
        this.channelId = channelId;

        // set the input/output flag
        output = this.channelId < 126; // leaves space for
        // "not used values" to be
        // classified as input

        // store the local control enabled flag
        localControlEnabled = localControl != 0;

        // store the output value
        if (outputValue >= 0 && outputValue <= 100) {
            // store the value
            this.outputValue = outputValue;

            // set the valid flag at true
            validOutputValue = true;
        }
        else if (outputValue == 127) {
            // assign a not valid output value
            this.outputValue = -1;

            // set the valid flag at false
            validOutputValue = false;
        }

    }

    /**
     * Checks if power failure detection on the actuator is enabled or not
     *
     * @return the powerFailureEnabled
     */
    boolean isPowerFailureEnabled() {
        return powerFailureEnabled;
    }

    /**
     * Checks if any power failure hase been detected since the last received
     * response message
     *
     * @return the powerFailureDetected
     */
    boolean isPowerFailureDetected() {
        return powerFailureDetected;
    }

    /**
     * Gets the command id associated to this message, always equal to 4
     *
     * @return the commandId
     */
    public int getCommandId() {
        return commandId;
    }

    /**
     * Checks if an over current switch-off has been executed by the actuator
     * after the last received response
     *
     * @return the overCurrentSwitchOffExecuted
     */
    boolean isOverCurrentSwitchOffExecuted() {
        return overCurrentSwitchOffExecuted;
    }

    /**
     * Provides the current actuator error state as a{@link D201ErrorLevel}
     * value
     *
     * @return the errorLevel
     */
    D201ErrorLevel getErrorLevel() {
        return errorLevel;
    }

    /**
     * Returns the channel id, identifying the actuator channel to which the
     * provided outputValue is referred
     *
     * @return the channelId
     */
    int getChannelId() {
        return channelId;
    }

    /**
     * Checks if the actuator channel is an input or an output channel.
     *
     * @return the output, true if the channel is an output, false otherwise
     */
    boolean isOutput() {
        return output;
    }

    /**
     * Checks if local control is enabled on the actuator.
     *
     * @return the localControlEnabled
     */
    boolean isLocalControlEnabled() {
        return localControlEnabled;
    }

    /**
     * Gets the channel output value, can only be used if the
     * <code>isValidOutputValue()</code> check is true.
     *
     * @return the outputValue
     */
    int getOutputValue() {
        return outputValue;
    }

    /**
     * Checks if the output value is actually valid or not
     *
     * @return the validOutputValue
     */
    boolean isValidOutputValue() {
        return validOutputValue;
    }

    /**
     * Provides an On/Off view of the current output value. Can only be used if
     * the <code>isValidOutputValue</code> check is true.
     *
     * @return true if the output value is > 1%, false otherwise.
     */
    boolean isOn() {
        return validOutputValue && outputValue > 0;
    }
}
