/*
 * Copyright 2017 enocean4j development teams
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package uk.co._4ng.enocean.eep.eep26.profiles.A5.A507;

/**
 * A class representing the interpeted payload of a 4BS telegram generated by an
 * occupancy sensor having the A50701 EEP profile.
 *
 * @author bonino
 */
class A50701OccupancySensingMessage {
    // the supply voltage level, if available
    private int supplyVoltage;

    // the supply voltage availability flag
    private boolean supplyVoltageAvailable;

    // the motion detection flag
    private boolean motionDetected;

    // the teach-in flag
    private boolean teachIn;

    // the validity flag
    private boolean valid;

    /**
     * Class constructor, given the telegram payload parses the content and sets
     * up the internal fields to reflect the payload content in a more
     * accessible form.
     *
     * @param data the 4BS telegram payload as an array of byte.
     */
    A50701OccupancySensingMessage(byte[] data) {
        // initially not valid
        valid = false;

        // check the data length, shall be 4
        if (data.length == 4) {
            // decode the supply voltage availability flag
            byte supplyVoltageAvailabilityAsByte = (byte) (data[3] & (byte) 0x01);

            // convert the byte value to a boolean
            supplyVoltageAvailable = supplyVoltageAvailabilityAsByte > 0;

            // if supply voltage is available, get the voltage value (first data
            // byte)
            byte supplyVoltageAsByte = data[0];

            // convert the value to an integer
            supplyVoltage = (int) supplyVoltageAsByte & 0x00ff;

            // decode the pir status
            byte pirStatusAsByte = data[2];

            // convert to a boolean value
            motionDetected = pirStatusAsByte < 0;

            // decode the teach-in flag
            // get the teach-in flag (offset 28, 4th bit of the 4th byte)
            teachIn = (data[3] & 0x8) == 0;

            // everything fine....
            // TODO: check if it is better to check the values of instance
            // variables to assess validity of the message.
            valid = true;
        }
    }

    /**
     * @return the supplyVoltage
     */
    int getSupplyVoltage() {
        return supplyVoltage;
    }

    /**
     * @return the supplyVoltageAvailable
     */
    boolean isSupplyVoltageAvailable() {
        return supplyVoltageAvailable;
    }

    /**
     * @return the motionDetected
     */
    boolean isMotionDetected() {
        return motionDetected;
    }

    /**
     * @return the teachIn
     */
    boolean isTeachIn() {
        return teachIn;
    }

    /**
     * @return the valid
     */
    boolean isValid() {
        return valid;
    }

}
